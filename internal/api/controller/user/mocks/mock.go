// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/controller/user/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jennwah/ryde-backend-engineer/internal/usecase/createuser/model"
	model0 "github.com/jennwah/ryde-backend-engineer/internal/usecase/getuser/model"
	model1 "github.com/jennwah/ryde-backend-engineer/internal/usecase/patchuser/model"
)

// MockcreateUser is a mock of createUser interface.
type MockcreateUser struct {
	ctrl     *gomock.Controller
	recorder *MockcreateUserMockRecorder
}

// MockcreateUserMockRecorder is the mock recorder for MockcreateUser.
type MockcreateUserMockRecorder struct {
	mock *MockcreateUser
}

// NewMockcreateUser creates a new mock instance.
func NewMockcreateUser(ctrl *gomock.Controller) *MockcreateUser {
	mock := &MockcreateUser{ctrl: ctrl}
	mock.recorder = &MockcreateUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcreateUser) EXPECT() *MockcreateUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcreateUser) Create(ctx context.Context, user model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcreateUserMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcreateUser)(nil).Create), ctx, user)
}

// MockgetUser is a mock of getUser interface.
type MockgetUser struct {
	ctrl     *gomock.Controller
	recorder *MockgetUserMockRecorder
}

// MockgetUserMockRecorder is the mock recorder for MockgetUser.
type MockgetUserMockRecorder struct {
	mock *MockgetUser
}

// NewMockgetUser creates a new mock instance.
func NewMockgetUser(ctrl *gomock.Controller) *MockgetUser {
	mock := &MockgetUser{ctrl: ctrl}
	mock.recorder = &MockgetUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetUser) EXPECT() *MockgetUserMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockgetUser) Get(ctx context.Context, id string) (model0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(model0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockgetUserMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockgetUser)(nil).Get), ctx, id)
}

// MockpatchUser is a mock of patchUser interface.
type MockpatchUser struct {
	ctrl     *gomock.Controller
	recorder *MockpatchUserMockRecorder
}

// MockpatchUserMockRecorder is the mock recorder for MockpatchUser.
type MockpatchUserMockRecorder struct {
	mock *MockpatchUser
}

// NewMockpatchUser creates a new mock instance.
func NewMockpatchUser(ctrl *gomock.Controller) *MockpatchUser {
	mock := &MockpatchUser{ctrl: ctrl}
	mock.recorder = &MockpatchUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpatchUser) EXPECT() *MockpatchUserMockRecorder {
	return m.recorder
}

// Patch mocks base method.
func (m *MockpatchUser) Patch(ctx context.Context, user model1.PatchUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockpatchUserMockRecorder) Patch(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockpatchUser)(nil).Patch), ctx, user)
}
