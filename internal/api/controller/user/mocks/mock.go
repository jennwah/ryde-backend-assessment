// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/controller/user/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jennwah/ryde-backend-engineer/internal/usecase/createuser/model"
)

// MockcreateUser is a mock of createUser interface.
type MockcreateUser struct {
	ctrl     *gomock.Controller
	recorder *MockcreateUserMockRecorder
}

// MockcreateUserMockRecorder is the mock recorder for MockcreateUser.
type MockcreateUserMockRecorder struct {
	mock *MockcreateUser
}

// NewMockcreateUser creates a new mock instance.
func NewMockcreateUser(ctrl *gomock.Controller) *MockcreateUser {
	mock := &MockcreateUser{ctrl: ctrl}
	mock.recorder = &MockcreateUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcreateUser) EXPECT() *MockcreateUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcreateUser) Create(ctx context.Context, user model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcreateUserMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcreateUser)(nil).Create), ctx, user)
}
