// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/controller/friend/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jennwah/ryde-backend-engineer/internal/usecase/getnearbyfriends/model"
)

// MockcreateFriend is a mock of createFriend interface.
type MockcreateFriend struct {
	ctrl     *gomock.Controller
	recorder *MockcreateFriendMockRecorder
}

// MockcreateFriendMockRecorder is the mock recorder for MockcreateFriend.
type MockcreateFriendMockRecorder struct {
	mock *MockcreateFriend
}

// NewMockcreateFriend creates a new mock instance.
func NewMockcreateFriend(ctrl *gomock.Controller) *MockcreateFriend {
	mock := &MockcreateFriend{ctrl: ctrl}
	mock.recorder = &MockcreateFriendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcreateFriend) EXPECT() *MockcreateFriendMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcreateFriend) Create(ctx context.Context, userID, friendID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, friendID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockcreateFriendMockRecorder) Create(ctx, userID, friendID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcreateFriend)(nil).Create), ctx, userID, friendID)
}

// MockgetNearbyFriends is a mock of getNearbyFriends interface.
type MockgetNearbyFriends struct {
	ctrl     *gomock.Controller
	recorder *MockgetNearbyFriendsMockRecorder
}

// MockgetNearbyFriendsMockRecorder is the mock recorder for MockgetNearbyFriends.
type MockgetNearbyFriendsMockRecorder struct {
	mock *MockgetNearbyFriends
}

// NewMockgetNearbyFriends creates a new mock instance.
func NewMockgetNearbyFriends(ctrl *gomock.Controller) *MockgetNearbyFriends {
	mock := &MockgetNearbyFriends{ctrl: ctrl}
	mock.recorder = &MockgetNearbyFriendsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetNearbyFriends) EXPECT() *MockgetNearbyFriendsMockRecorder {
	return m.recorder
}

// GetNearby mocks base method.
func (m *MockgetNearbyFriends) GetNearby(ctx context.Context, userID string, radiusMeter float64) (model.Friends, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearby", ctx, userID, radiusMeter)
	ret0, _ := ret[0].(model.Friends)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearby indicates an expected call of GetNearby.
func (mr *MockgetNearbyFriendsMockRecorder) GetNearby(ctx, userID, radiusMeter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearby", reflect.TypeOf((*MockgetNearbyFriends)(nil).GetNearby), ctx, userID, radiusMeter)
}
